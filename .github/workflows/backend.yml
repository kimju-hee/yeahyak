name: backend-build-push-deploy

on:
  push:
    branches: [ "deploy1" ]
    paths:
      - "backend/**"
      - ".github/workflows/backend.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: gradle

      - name: Make gradlew executable
        working-directory: backend
        run: chmod +x gradlew || true

      - name: Build jar (Gradle)
        working-directory: backend
        run: ./gradlew clean bootJar -x test --no-daemon --stacktrace --info

      - name: List build artifacts
        working-directory: backend
        run: ls -alh build/libs

      - name: Compute IMAGE_TAG
        id: meta
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "image_tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "image_tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true

      - name: ACR login (az acr login)
        run: az acr login -n $ACR_NAME

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push to ACR
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.LOGIN_SERVER }}/backend:${{ steps.meta.outputs.image_tag }}
            ${{ env.LOGIN_SERVER }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-push

    steps:
      - name: SSH into VM & update container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script_stop: true
          # 원격으로 전달할 환경변수 목록 (쉘 해석 없이 그대로 export)
          envs: TZ,SPRING_PROFILES_ACTIVE,SERVER_PORT,AI_SERVICE_URL,SPRING_DATASOURCE_URL,SPRING_DATASOURCE_USERNAME,SPRING_DATASOURCE_PASSWORD,AZURE_STORAGE_BLOB_ENDPOINT,AZURE_STORAGE_CONTAINER_NAME,AZURE_STORAGE_CONNECTION_STRING
          script: |
            set -e
            LOGIN_SERVER="${{ env.LOGIN_SERVER }}"
            IMAGE="${LOGIN_SERVER}/backend:latest"
            CONTAINER_NAME="yeahyak-backend"
            HOST_BIND_IP="127.0.0.1"
            HOST_PORT="8080"
            CONTAINER_PORT="8080"

            # 필수 env 존재 확인 (이미 원격 셸에 export 되어 있음)
            for v in SPRING_DATASOURCE_URL SPRING_DATASOURCE_USERNAME SPRING_DATASOURCE_PASSWORD AZURE_STORAGE_BLOB_ENDPOINT AZURE_STORAGE_CONTAINER_NAME AZURE_STORAGE_CONNECTION_STRING; do
              [ -z "${!v}" ] && echo "ERROR: missing env $v" && exit 1
            done

            # ACR 로그인 & 최신 이미지 pull
            echo "${{ secrets.ACR_PASSWORD }}" | docker login "$LOGIN_SERVER" -u "${{ secrets.ACR_USERNAME }}" --password-stdin
            docker pull "$IMAGE"

            # 네트워크 생성(있으면 통과) 및 기존 컨테이너/포트 정리
            docker network create yeahyak-net >/dev/null 2>&1 || true
            docker rm -f "$CONTAINER_NAME" || true
            INUSE_IDS=$(docker ps --format '{{.ID}} {{.Ports}}' | awk '/(0\.0\.0\.0|127\.0\.0\.1):8080->8080\/tcp/ {print $1}')
            [ -n "$INUSE_IDS" ] && docker rm -f $INUSE_IDS || true

            # 컨테이너 재실행 (127.0.0.1:8080 -> 8080/tcp)
            docker run -d --name "$CONTAINER_NAME" \
              --restart unless-stopped \
              --network yeahyak-net \
              -p ${HOST_BIND_IP}:${HOST_PORT}:${CONTAINER_PORT} \
              -e TZ \
              -e SPRING_PROFILES_ACTIVE \
              -e SERVER_PORT \
              -e AI_SERVICE_URL \
              -e SPRING_DATASOURCE_URL \
              -e SPRING_DATASOURCE_USERNAME \
              -e SPRING_DATASOURCE_PASSWORD \
              -e AZURE_STORAGE_BLOB_ENDPOINT \
              -e AZURE_STORAGE_CONTAINER_NAME \
              -e AZURE_STORAGE_CONNECTION_STRING \
              "$IMAGE"

            docker image prune -f
            docker logout "$LOGIN_SERVER" || true
        env:
          # 여기 값들이 원격으로 그대로 전달됨 (특수문자 안전)
          TZ: Asia/Seoul
          SPRING_PROFILES_ACTIVE: prod
          SERVER_PORT: "8080"
          AI_SERVICE_URL: http://yeahyak-ai:8080

          SPRING_DATASOURCE_URL: ${{ secrets.DB_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}

          AZURE_STORAGE_BLOB_ENDPOINT: ${{ secrets.BLOB_ENDPOINT }}
          AZURE_STORAGE_CONTAINER_NAME: ${{ secrets.BLOB_CONTAINER }}
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.BLOB_CONN_STR }}
