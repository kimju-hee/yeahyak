<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/src/main/java/com/yeahyak/backend/service/PharmacyRequestService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/com/yeahyak/backend/service/PharmacyRequestService.java" />
              <option name="originalContent" value="package com.yeahyak.backend.service;&#10;&#10;import com.yeahyak.backend.dto.PharmacyRequestDetailResponse;&#10;import com.yeahyak.backend.dto.PharmacyRequestListResponse;&#10;import com.yeahyak.backend.entity.Admin;&#10;import com.yeahyak.backend.entity.Pharmacy;&#10;import com.yeahyak.backend.entity.PharmacyRequest;&#10;import com.yeahyak.backend.entity.User;&#10;import com.yeahyak.backend.entity.enums.PharmacyRequestStatus;&#10;import com.yeahyak.backend.entity.enums.Region;&#10;import com.yeahyak.backend.repository.AdminRepository;&#10;import com.yeahyak.backend.repository.PharmacyRepository;&#10;import com.yeahyak.backend.repository.PharmacyRequestRepository;&#10;import com.yeahyak.backend.repository.UserRepository;&#10;import jakarta.transaction.Transactional;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.security.core.context.SecurityContextHolder;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class PharmacyRequestService {&#10;&#10;  private final PharmacyRequestRepository pharmacyRequestRepo;&#10;  private final UserRepository userRepo;&#10;  private final AdminRepository adminRepo;&#10;  private final PharmacyRepository pharmacyRepo;&#10;&#10;  @Transactional(readOnly = true)&#10;  public Page&lt;PharmacyRequestListResponse&gt; getPharmacyRequests(&#10;      PharmacyRequestStatus status, Region region, String keyword, int page, int size&#10;  ) {&#10;    Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).descending());&#10;    return pharmacyRequestRepo.findByStatusAndRegionAndPharmacyName(&#10;        status, region, keyword, pageable&#10;    ).map(pharmacyRequest -&gt; PharmacyRequestListResponse.builder()&#10;        .pharmacyRequestId(pharmacyRequest.getPharmacyRequestId())&#10;        .userId(pharmacyRequest.getUser().getUserId())&#10;        .email(pharmacyRequest.getUser().getEmail())&#10;        .pharmacyName(pharmacyRequest.getPharmacyName())&#10;        .bizRegNo(pharmacyRequest.getBizRegNo())&#10;        .region(pharmacyRequest.getRegion())&#10;        .contact(pharmacyRequest.getContact())&#10;        .status(pharmacyRequest.getStatus())&#10;        .requestedAt(pharmacyRequest.getRequestedAt())&#10;        .build());&#10;  }&#10;&#10;  @Transactional(readOnly = true)&#10;  public PharmacyRequestDetailResponse getPharmacyRequestById(Long pharmacyRequestId) {&#10;    PharmacyRequest pharmacyRequest = pharmacyRequestRepo.findById(pharmacyRequestId)&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;해당 약국 등록 요청을 찾을 수 없습니다.&quot;));&#10;    return PharmacyRequestDetailResponse.builder()&#10;        .pharmacyRequestId(pharmacyRequest.getPharmacyRequestId())&#10;        .userId(pharmacyRequest.getUser().getUserId())&#10;        .email(pharmacyRequest.getUser().getEmail())&#10;        .pharmacyName(pharmacyRequest.getPharmacyName())&#10;        .bizRegNo(pharmacyRequest.getBizRegNo())&#10;        .representativeName(pharmacyRequest.getRepresentativeName())&#10;        .postcode(pharmacyRequest.getPostcode())&#10;        .address(pharmacyRequest.getAddress())&#10;        .detailAddress(pharmacyRequest.getDetailAddress())&#10;        .region(pharmacyRequest.getRegion())&#10;        .contact(pharmacyRequest.getContact())&#10;        .status(pharmacyRequest.getStatus())&#10;        .requestedAt(pharmacyRequest.getRequestedAt())&#10;        .processedAt(pharmacyRequest.getProcessedAt())&#10;        .build();&#10;  }&#10;&#10;  @Transactional&#10;  public void approvePharmacyRequest(Long pharmacyRequestId) {&#10;    PharmacyRequest pharmacyRequest = pharmacyRequestRepo.findById(pharmacyRequestId)&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;해당 약국 등록 요청을 찾을 수 없습니다.&quot;));&#10;&#10;    if (pharmacyRequest.getStatus() != PharmacyRequestStatus.PENDING) {&#10;      throw new RuntimeException(&quot;이미 처리된 약국 등록 요청입니다.&quot;);&#10;    }&#10;&#10;    String email = SecurityContextHolder.getContext().getAuthentication().getName();&#10;    User user = userRepo.findByEmail(email)&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;관리자 정보를 찾을 수 없습니다.&quot;));&#10;    Admin admin = adminRepo.findByUser_UserId(user.getUserId())&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;관리자 정보를 찾을 수 없습니다.&quot;));&#10;&#10;    Pharmacy pharmacy = Pharmacy.builder()&#10;        .user(user)&#10;        .pharmacyName(pharmacyRequest.getPharmacyName())&#10;        .bizRegNo(pharmacyRequest.getBizRegNo())&#10;        .representativeName(pharmacyRequest.getRepresentativeName())&#10;        .postcode(pharmacyRequest.getPostcode())&#10;        .address(pharmacyRequest.getAddress())&#10;        .detailAddress(pharmacyRequest.getDetailAddress())&#10;        .region(pharmacyRequest.getRegion())&#10;        .contact(pharmacyRequest.getContact())&#10;        .outstandingBalance(0)&#10;        .build();&#10;    pharmacy = pharmacyRepo.save(pharmacy);&#10;&#10;    pharmacyRequest.setAdmin(admin);&#10;    pharmacyRequest.setStatus(PharmacyRequestStatus.APPROVED);&#10;    pharmacyRequestRepo.save(pharmacyRequest);&#10;  }&#10;&#10;  @Transactional&#10;  public void rejectPharmacyRequest(Long pharmacyRequestId) {&#10;    PharmacyRequest pharmacyRequest = pharmacyRequestRepo.findById(pharmacyRequestId)&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;해당 약국 등록 요청을 찾을 수 없습니다.&quot;));&#10;&#10;    String email = SecurityContextHolder.getContext().getAuthentication().getName();&#10;    User user = userRepo.findByEmail(email)&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;관리자 정보를 찾을 수 없습니다.&quot;));&#10;    Admin admin = adminRepo.findByUser_UserId(user.getUserId())&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;관리자 정보를 찾을 수 없습니다.&quot;));&#10;&#10;    pharmacyRequest.setAdmin(admin);&#10;    pharmacyRequest.setStatus(PharmacyRequestStatus.REJECTED);&#10;    pharmacyRequestRepo.save(pharmacyRequest);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.yeahyak.backend.service;&#13;&#10;&#13;&#10;import com.yeahyak.backend.dto.PharmacyRequestDetailResponse;&#13;&#10;import com.yeahyak.backend.dto.PharmacyRequestListResponse;&#13;&#10;import com.yeahyak.backend.entity.Admin;&#13;&#10;import com.yeahyak.backend.entity.Pharmacy;&#13;&#10;import com.yeahyak.backend.entity.PharmacyRequest;&#13;&#10;import com.yeahyak.backend.entity.User;&#13;&#10;import com.yeahyak.backend.entity.enums.PharmacyRequestStatus;&#13;&#10;import com.yeahyak.backend.entity.enums.Region;&#13;&#10;import com.yeahyak.backend.repository.AdminRepository;&#13;&#10;import com.yeahyak.backend.repository.PharmacyRepository;&#13;&#10;import com.yeahyak.backend.repository.PharmacyRequestRepository;&#13;&#10;import com.yeahyak.backend.repository.UserRepository;&#13;&#10;import jakarta.transaction.Transactional;&#13;&#10;import lombok.RequiredArgsConstructor;&#13;&#10;import org.springframework.data.domain.Page;&#13;&#10;import org.springframework.data.domain.PageRequest;&#13;&#10;import org.springframework.data.domain.Pageable;&#13;&#10;import org.springframework.data.domain.Sort;&#13;&#10;import org.springframework.security.core.context.SecurityContextHolder;&#13;&#10;import org.springframework.stereotype.Service;&#13;&#10;&#13;&#10;@Service&#13;&#10;@RequiredArgsConstructor&#13;&#10;public class PharmacyRequestService {&#13;&#10;&#13;&#10;  private final PharmacyRequestRepository pharmacyRequestRepo;&#13;&#10;  private final UserRepository userRepo;&#13;&#10;  private final AdminRepository adminRepo;&#13;&#10;  private final PharmacyRepository pharmacyRepo;&#13;&#10;&#13;&#10;  @Transactional(readOnly = true)&#13;&#10;  public Page&lt;PharmacyRequestListResponse&gt; getPharmacyRequests(&#13;&#10;      PharmacyRequestStatus status, Region region, String keyword, int page, int size&#13;&#10;  ) {&#13;&#10;    Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).descending());&#13;&#10;    return pharmacyRequestRepo.findByStatusAndRegionAndPharmacyName(&#13;&#10;        status, region, keyword, pageable&#13;&#10;    ).map(pharmacyRequest -&gt; PharmacyRequestListResponse.builder()&#13;&#10;        .pharmacyRequestId(pharmacyRequest.getPharmacyRequestId())&#13;&#10;        .userId(pharmacyRequest.getUser().getUserId())&#13;&#10;        .email(pharmacyRequest.getUser().getEmail())&#13;&#10;        .pharmacyName(pharmacyRequest.getPharmacyName())&#13;&#10;        .bizRegNo(pharmacyRequest.getBizRegNo())&#13;&#10;        .region(pharmacyRequest.getRegion())&#13;&#10;        .contact(pharmacyRequest.getContact())&#13;&#10;        .status(pharmacyRequest.getStatus())&#13;&#10;        .requestedAt(pharmacyRequest.getRequestedAt())&#13;&#10;        .build());&#13;&#10;  }&#13;&#10;&#13;&#10;  @Transactional(readOnly = true)&#13;&#10;  public PharmacyRequestDetailResponse getPharmacyRequestById(Long pharmacyRequestId) {&#13;&#10;    PharmacyRequest pharmacyRequest = pharmacyRequestRepo.findById(pharmacyRequestId)&#13;&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;해당 약국 등록 요청을 찾을 수 없습니다.&quot;));&#13;&#10;    return PharmacyRequestDetailResponse.builder()&#13;&#10;        .pharmacyRequestId(pharmacyRequest.getPharmacyRequestId())&#13;&#10;        .userId(pharmacyRequest.getUser().getUserId())&#13;&#10;        .email(pharmacyRequest.getUser().getEmail())&#13;&#10;        .pharmacyName(pharmacyRequest.getPharmacyName())&#13;&#10;        .bizRegNo(pharmacyRequest.getBizRegNo())&#13;&#10;        .representativeName(pharmacyRequest.getRepresentativeName())&#13;&#10;        .postcode(pharmacyRequest.getPostcode())&#13;&#10;        .address(pharmacyRequest.getAddress())&#13;&#10;        .detailAddress(pharmacyRequest.getDetailAddress())&#13;&#10;        .region(pharmacyRequest.getRegion())&#13;&#10;        .contact(pharmacyRequest.getContact())&#13;&#10;        .status(pharmacyRequest.getStatus())&#13;&#10;        .requestedAt(pharmacyRequest.getRequestedAt())&#13;&#10;        .processedAt(pharmacyRequest.getProcessedAt())&#13;&#10;        .build();&#13;&#10;  }&#13;&#10;&#13;&#10;  @Transactional&#13;&#10;  public void approvePharmacyRequest(Long pharmacyRequestId) {&#13;&#10;    PharmacyRequest pharmacyRequest = pharmacyRequestRepo.findById(pharmacyRequestId)&#13;&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;해당 약국 등록 요청을 찾을 수 없습니다.&quot;));&#13;&#10;&#13;&#10;    if (pharmacyRequest.getStatus() != PharmacyRequestStatus.PENDING) {&#13;&#10;      throw new RuntimeException(&quot;이미 처리된 약국 등록 요청입니다.&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    String email = SecurityContextHolder.getContext().getAuthentication().getName();&#13;&#10;    User user = userRepo.findByEmail(email)&#13;&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;관리자 정보를 찾을 수 없습니다.&quot;));&#13;&#10;    Admin admin = adminRepo.findByUser_UserId(user.getUserId())&#13;&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;관리자 정보를 찾을 수 없습니다.&quot;));&#13;&#10;&#13;&#10;    Pharmacy pharmacy = Pharmacy.builder()&#13;&#10;        .user(user)&#13;&#10;        .pharmacyName(pharmacyRequest.getPharmacyName())&#13;&#10;        .bizRegNo(pharmacyRequest.getBizRegNo())&#13;&#10;        .representativeName(pharmacyRequest.getRepresentativeName())&#13;&#10;        .postcode(pharmacyRequest.getPostcode())&#13;&#10;        .address(pharmacyRequest.getAddress())&#13;&#10;        .detailAddress(pharmacyRequest.getDetailAddress())&#13;&#10;        .region(pharmacyRequest.getRegion())&#13;&#10;        .contact(pharmacyRequest.getContact())&#13;&#10;        .outstandingBalance(0)&#13;&#10;        .build();&#13;&#10;    pharmacy = pharmacyRepo.save(pharmacy);&#13;&#10;&#13;&#10;    pharmacyRequest.setAdmin(admin);&#13;&#10;    pharmacyRequest.setStatus(PharmacyRequestStatus.APPROVED);&#13;&#10;    pharmacyRequestRepo.save(pharmacyRequest);&#13;&#10;  }&#13;&#10;&#13;&#10;  @Transactional&#13;&#10;  public void rejectPharmacyRequest(Long pharmacyRequestId) {&#13;&#10;    PharmacyRequest pharmacyRequest = pharmacyRequestRepo.findById(pharmacyRequestId)&#13;&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;해당 약국 등록 요청을 찾을 수 없습니다.&quot;));&#13;&#10;&#13;&#10;    String email = SecurityContextHolder.getContext().getAuthentication().getName();&#13;&#10;    User user = userRepo.findByEmail(email)&#13;&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;관리자 정보를 찾을 수 없습니다.&quot;));&#13;&#10;    Admin admin = adminRepo.findByUser_UserId(user.getUserId())&#13;&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;관리자 정보를 찾을 수 없습니다.&quot;));&#13;&#10;&#13;&#10;    pharmacyRequest.setAdmin(admin);&#13;&#10;    pharmacyRequest.setStatus(PharmacyRequestStatus.REJECTED);&#13;&#10;    pharmacyRequestRepo.save(pharmacyRequest);&#13;&#10;  }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/src/main/java/com/yeahyak/backend/service/ReturnService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/src/main/java/com/yeahyak/backend/service/ReturnService.java" />
              <option name="originalContent" value="package com.yeahyak.backend.service;&#10;&#10;import com.yeahyak.backend.dto.ReturnCreateRequest;&#10;import com.yeahyak.backend.dto.ReturnCreateResponse;&#10;import com.yeahyak.backend.dto.ReturnDetailResponse;&#10;import com.yeahyak.backend.dto.ReturnListResponse;&#10;import com.yeahyak.backend.entity.OrderItem;&#10;import com.yeahyak.backend.entity.Orders;&#10;import com.yeahyak.backend.entity.Pharmacy;&#10;import com.yeahyak.backend.entity.Product;&#10;import com.yeahyak.backend.entity.ReturnItem;&#10;import com.yeahyak.backend.entity.Returns;&#10;import com.yeahyak.backend.entity.enums.BalanceTxType;&#10;import com.yeahyak.backend.entity.enums.Region;&#10;import com.yeahyak.backend.entity.enums.ReturnStatus;&#10;import com.yeahyak.backend.entity.enums.StockTxType;&#10;import com.yeahyak.backend.repository.OrderItemRepository;&#10;import com.yeahyak.backend.repository.OrderRepository;&#10;import com.yeahyak.backend.repository.PharmacyRepository;&#10;import com.yeahyak.backend.repository.ProductRepository;&#10;import com.yeahyak.backend.repository.ReturnItemRepository;&#10;import com.yeahyak.backend.repository.ReturnRepository;&#10;import com.yeahyak.backend.repository.StockTxRepository;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Map;&#10;import java.util.stream.Collectors;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class ReturnService {&#10;&#10;  private final ReturnRepository returnRepo;&#10;  private final ReturnItemRepository returnItemRepo;&#10;  private final OrderRepository orderRepo;&#10;  private final OrderItemRepository orderItemRepo;&#10;  private final PharmacyRepository pharmacyRepo;&#10;  private final ProductRepository productRepo;&#10;  private final StockTxRepository stockTxRepo;&#10;  private final BalanceTxService balanceTxService;&#10;  private final StockTxService stockTxService;&#10;&#10;  /**&#10;   * 반품 요청을 생성합니다.&#10;   */&#10;  @Transactional&#10;  public ReturnCreateResponse createReturn(ReturnCreateRequest req) {&#10;    Pharmacy pharmacy = pharmacyRepo.findById(req.getPharmacyId())&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;가맹점 정보를 찾을 수 없습니다.&quot;));&#10;&#10;    Orders orders = orderRepo.findById(req.getOrderId())&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;발주 정보를 찾을 수 없습니다.&quot;));&#10;&#10;    if (req.getItems() == null || req.getItems().isEmpty()) {&#10;      throw new RuntimeException(&quot;반품 요청 품목이 없습니다.&quot;);&#10;    }&#10;&#10;    int totalPrice = 0;&#10;    for (ReturnCreateRequest.Item itemReq : req.getItems()) {&#10;      Product product = productRepo.findById(itemReq.getProductId())&#10;          .orElseThrow(() -&gt; new RuntimeException(&quot;제품 정보가 없습니다.&quot;));&#10;&#10;      int quantity = itemReq.getQuantity();&#10;      int unitPrice = itemReq.getUnitPrice();&#10;      int subtotalPrice = Math.multiplyExact(quantity, unitPrice);&#10;      totalPrice = Math.addExact(totalPrice, subtotalPrice);&#10;    }&#10;&#10;    Returns returns = Returns.builder()&#10;        .pharmacy(pharmacy)&#10;        .orders(orders)&#10;        .status(ReturnStatus.REQUESTED)&#10;        .reason(req.getReason())&#10;        .totalPrice(totalPrice)&#10;        .build();&#10;    returnRepo.save(returns);&#10;&#10;    List&lt;ReturnItem&gt; returnItems = new ArrayList&lt;&gt;();&#10;    List&lt;OrderItem&gt; orderItems = orderItemRepo.findByOrders(orders);&#10;    Map&lt;Long, Integer&gt; orderedQtyMap = orderItems.stream()&#10;        .collect(Collectors.toMap(oi -&gt; oi.getProduct().getProductId(), OrderItem::getQuantity));&#10;&#10;    final List&lt;ReturnStatus&gt; statuses = List.of(&#10;        ReturnStatus.REQUESTED,&#10;        ReturnStatus.APPROVED,&#10;        ReturnStatus.RECEIVED,&#10;        ReturnStatus.COMPLETED&#10;    );&#10;&#10;    for (ReturnCreateRequest.Item itemReq : req.getItems()) {&#10;      Product product = productRepo.findById(itemReq.getProductId())&#10;          .orElseThrow(() -&gt; new RuntimeException(&quot;제품 정보를 찾을 수 없습니다.&quot;));&#10;&#10;      // 반품 가능 수량 제한&#10;      int orderedQty = orderedQtyMap.getOrDefault(product.getProductId(), 0);&#10;      int already = returnItemRepo.sumReturnedQtyForOrderAndProduct(&#10;          orders, product.getProductId(), statuses&#10;      );&#10;      int left = orderedQty - already;&#10;      if (itemReq.getQuantity() &gt; left) {&#10;        throw new RuntimeException(&#10;            String.format(&quot;반품 가능 수량을 초과했습니다. (주문수량=%d개, 누적반품=%d개)&quot;, orderedQty, already)&#10;        );&#10;      }&#10;&#10;      int quantity = itemReq.getQuantity();&#10;      int unitPrice = itemReq.getUnitPrice();&#10;      int subtotalPrice = Math.multiplyExact(quantity, unitPrice);&#10;&#10;      ReturnItem returnItem = ReturnItem.builder()&#10;          .returns(returns)&#10;          .product(product)&#10;          .quantity(quantity)&#10;          .unitPrice(unitPrice)&#10;          .subtotalPrice(subtotalPrice)&#10;          .build();&#10;      returnItems.add(returnItem);&#10;    }&#10;    returnItemRepo.saveAll(returnItems);&#10;&#10;    return new ReturnCreateResponse(returns.getReturnId());&#10;  }&#10;&#10;  /**&#10;   * 본사에서 반품 요청 목록을 조회합니다. 기간이나 상태를 지정하지 않으면 모든 반품 요청을 조회합니다.&#10;   */&#10;  @Transactional(readOnly = true)&#10;  public Page&lt;ReturnListResponse&gt; getReturns(&#10;      ReturnStatus status, Region region, LocalDateTime start, LocalDateTime end,&#10;      int page, int size&#10;  ) {&#10;    Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).descending());&#10;    String summary = &quot;반품요청&quot;;&#10;    return returnRepo.findByStatusAndRegionAndCreatedAtBetween(&#10;            status, region, start, end, pageable)&#10;        .map(returns -&gt; ReturnListResponse.builder()&#10;            .returnId(returns.getReturnId())&#10;            .pharmacyId(returns.getPharmacy().getPharmacyId())&#10;            .pharmacyName(returns.getPharmacy().getPharmacyName())&#10;            .status(returns.getStatus())&#10;            .summary(summary)&#10;            .reason(returns.getReason())&#10;            .totalPrice(returns.getTotalPrice())&#10;            .createdAt(returns.getCreatedAt())&#10;            .build());&#10;  }&#10;&#10;  /**&#10;   * 가맹점에서 반품 요청 목록을 조회합니다. 상태를 지정하지 않으면 해당 가맹점의 모든 반품 요청을 조회합니다.&#10;   */&#10;  @Transactional(readOnly = true)&#10;  public Page&lt;ReturnListResponse&gt; getReturnsByPharmacy(&#10;      Long pharmacyId, ReturnStatus status, int page, int size&#10;  ) {&#10;    Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).descending());&#10;    String summary = &quot;반품요청&quot;;&#10;    return returnRepo.findByPharmacy_PharmacyIdAndStatus(pharmacyId, status, pageable)&#10;        .map(returns -&gt; ReturnListResponse.builder()&#10;            .returnId(returns.getReturnId())&#10;            .pharmacyId(returns.getPharmacy().getPharmacyId())&#10;            .pharmacyName(returns.getPharmacy().getPharmacyName())&#10;            .status(returns.getStatus())&#10;            .summary(summary)&#10;            .reason(returns.getReason())&#10;            .totalPrice(returns.getTotalPrice())&#10;            .createdAt(returns.getCreatedAt())&#10;            .build());&#10;  }&#10;&#10;  /**&#10;   * 반품 요청 상세를 조회합니다.&#10;   */&#10;  @Transactional(readOnly = true)&#10;  public ReturnDetailResponse getReturnById(Long returnId) {&#10;    Returns returns = returnRepo.findById(returnId)&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;반품 요청 정보를 찾을 수 없습니다.&quot;));&#10;&#10;    List&lt;ReturnItem&gt; items = returnItemRepo.findByReturns(returns);&#10;    List&lt;ReturnDetailResponse.Item&gt; itemsList = items.stream()&#10;        .map(item -&gt; ReturnDetailResponse.Item.builder()&#10;            .productId(item.getProduct().getProductId())&#10;            .productName(item.getProduct().getProductName())&#10;            .mainCategory(item.getProduct().getMainCategory())&#10;            .subCategory(item.getProduct().getSubCategory())&#10;            .manufacturer(item.getProduct().getManufacturer())&#10;            .productImgUrl(item.getProduct().getProductImgUrl())&#10;            .quantity(item.getQuantity())&#10;            .unitPrice(item.getUnitPrice())&#10;            .subtotalPrice(item.getSubtotalPrice())&#10;            .build()&#10;        ).toList();&#10;&#10;    return ReturnDetailResponse.builder()&#10;        .returnId(returns.getReturnId())&#10;        .pharmacyId(returns.getPharmacy().getPharmacyId())&#10;        .pharmacyName(returns.getPharmacy().getPharmacyName())&#10;        .status(returns.getStatus())&#10;        .summary(&quot;반품요청&quot;)&#10;        .reason(returns.getReason())&#10;        .totalPrice(returns.getTotalPrice())&#10;        .createdAt(returns.getCreatedAt())&#10;        .updatedAt(returns.getUpdatedAt())&#10;        .items(itemsList)&#10;        .build();&#10;  }&#10;&#10;  /**&#10;   * 반품 요청의 상태를 업데이트합니다. 업데이트 상태가 COMPLETED인 경우, 유저의 미정산 잔액을 감소시키고 제품의 재고를 복구합니다.&#10;   */&#10;  @Transactional&#10;  public void updateReturnStatus(Long returnId, ReturnStatus status) {&#10;    Returns returns = returnRepo.findById(returnId)&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;반품 요청 정보를 찾을 수 없습니다.&quot;));&#10;&#10;    if (returns.getStatus() == ReturnStatus.CANCELED) {&#10;      throw new RuntimeException(&quot;이미 취소된 반품 요청입니다.&quot;);&#10;    } else if (returns.getStatus() == ReturnStatus.COMPLETED) {&#10;      throw new RuntimeException(&quot;이미 완료된 반품 요청입니다.&quot;);&#10;    }&#10;&#10;    if (status == ReturnStatus.COMPLETED) {&#10;      balanceTxService.createBalanceTx(&#10;          returns.getPharmacy().getPharmacyId(), BalanceTxType.RETURN, returns.getTotalPrice()&#10;      );&#10;&#10;      List&lt;ReturnItem&gt; items = returnItemRepo.findByReturns(returns);&#10;      for (ReturnItem ri : items) {&#10;        stockTxService.createStockTx(&#10;            ri.getProduct().getProductId(), StockTxType.RETURN_IN, ri.getQuantity()&#10;        );&#10;      }&#10;    }&#10;&#10;    returns.setStatus(status);&#10;    returnRepo.save(returns);&#10;  }&#10;&#10;  /**&#10;   * 반품 요청을 삭제합니다.&#10;   */&#10;  @Transactional&#10;  public void deleteReturn(Long returnId) {&#10;    Returns returns = returnRepo.findById(returnId)&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;반품 요청 정보를 찾을 수 없습니다.&quot;));&#10;&#10;    returnItemRepo.deleteAllByReturns(returns);&#10;    returnRepo.delete(returns);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.yeahyak.backend.service;&#13;&#10;&#13;&#10;import com.yeahyak.backend.dto.ReturnCreateRequest;&#13;&#10;import com.yeahyak.backend.dto.ReturnCreateResponse;&#13;&#10;import com.yeahyak.backend.dto.ReturnDetailResponse;&#13;&#10;import com.yeahyak.backend.dto.ReturnListResponse;&#13;&#10;import com.yeahyak.backend.entity.OrderItem;&#13;&#10;import com.yeahyak.backend.entity.Orders;&#13;&#10;import com.yeahyak.backend.entity.Pharmacy;&#13;&#10;import com.yeahyak.backend.entity.Product;&#13;&#10;import com.yeahyak.backend.entity.ReturnItem;&#13;&#10;import com.yeahyak.backend.entity.Returns;&#13;&#10;import com.yeahyak.backend.entity.enums.BalanceTxType;&#13;&#10;import com.yeahyak.backend.entity.enums.Region;&#13;&#10;import com.yeahyak.backend.entity.enums.ReturnStatus;&#13;&#10;import com.yeahyak.backend.entity.enums.StockTxType;&#13;&#10;import com.yeahyak.backend.repository.OrderItemRepository;&#13;&#10;import com.yeahyak.backend.repository.OrderRepository;&#13;&#10;import com.yeahyak.backend.repository.PharmacyRepository;&#13;&#10;import com.yeahyak.backend.repository.ProductRepository;&#13;&#10;import com.yeahyak.backend.repository.ReturnItemRepository;&#13;&#10;import com.yeahyak.backend.repository.ReturnRepository;&#13;&#10;import com.yeahyak.backend.repository.StockTxRepository;&#13;&#10;import java.time.LocalDateTime;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Map;&#13;&#10;import java.util.stream.Collectors;&#13;&#10;import lombok.RequiredArgsConstructor;&#13;&#10;import org.springframework.data.domain.Page;&#13;&#10;import org.springframework.data.domain.PageRequest;&#13;&#10;import org.springframework.data.domain.Pageable;&#13;&#10;import org.springframework.data.domain.Sort;&#13;&#10;import org.springframework.stereotype.Service;&#13;&#10;import org.springframework.transaction.annotation.Transactional;&#13;&#10;&#13;&#10;@Service&#13;&#10;@RequiredArgsConstructor&#13;&#10;public class ReturnService {&#13;&#10;&#13;&#10;  private final ReturnRepository returnRepo;&#13;&#10;  private final ReturnItemRepository returnItemRepo;&#13;&#10;  private final OrderRepository orderRepo;&#13;&#10;  private final OrderItemRepository orderItemRepo;&#13;&#10;  private final PharmacyRepository pharmacyRepo;&#13;&#10;  private final ProductRepository productRepo;&#13;&#10;  private final StockTxRepository stockTxRepo;&#13;&#10;  private final BalanceTxService balanceTxService;&#13;&#10;  private final StockTxService stockTxService;&#13;&#10;&#13;&#10;  /**&#13;&#10;   * 반품 요청을 생성합니다.&#13;&#10;   */&#13;&#10;  @Transactional&#13;&#10;  public ReturnCreateResponse createReturn(ReturnCreateRequest req) {&#13;&#10;    Pharmacy pharmacy = pharmacyRepo.findById(req.getPharmacyId())&#13;&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;가맹점 정보를 찾을 수 없습니다.&quot;));&#13;&#10;&#13;&#10;    Orders orders = orderRepo.findById(req.getOrderId())&#13;&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;발주 정보를 찾을 수 없습니다.&quot;));&#13;&#10;&#13;&#10;    if (req.getItems() == null || req.getItems().isEmpty()) {&#13;&#10;      throw new RuntimeException(&quot;반품 요청 품목이 없습니다.&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    int totalPrice = 0;&#13;&#10;    for (ReturnCreateRequest.Item itemReq : req.getItems()) {&#13;&#10;      Product product = productRepo.findById(itemReq.getProductId())&#13;&#10;          .orElseThrow(() -&gt; new RuntimeException(&quot;제품 정보가 없습니다.&quot;));&#13;&#10;&#13;&#10;      int quantity = itemReq.getQuantity();&#13;&#10;      int unitPrice = itemReq.getUnitPrice();&#13;&#10;      int subtotalPrice = Math.multiplyExact(quantity, unitPrice);&#13;&#10;      totalPrice = Math.addExact(totalPrice, subtotalPrice);&#13;&#10;    }&#13;&#10;&#13;&#10;    Returns returns = Returns.builder()&#13;&#10;        .pharmacy(pharmacy)&#13;&#10;        .orders(orders)&#13;&#10;        .status(ReturnStatus.REQUESTED)&#13;&#10;        .reason(req.getReason())&#13;&#10;        .totalPrice(totalPrice)&#13;&#10;        .build();&#13;&#10;    returnRepo.save(returns);&#13;&#10;&#13;&#10;    List&lt;ReturnItem&gt; returnItems = new ArrayList&lt;&gt;();&#13;&#10;    List&lt;OrderItem&gt; orderItems = orderItemRepo.findByOrders(orders);&#13;&#10;    Map&lt;Long, Integer&gt; orderedQtyMap = orderItems.stream()&#13;&#10;        .collect(Collectors.toMap(oi -&gt; oi.getProduct().getProductId(), OrderItem::getQuantity));&#13;&#10;&#13;&#10;    final List&lt;ReturnStatus&gt; statuses = List.of(&#13;&#10;        ReturnStatus.REQUESTED,&#13;&#10;        ReturnStatus.APPROVED,&#13;&#10;        ReturnStatus.RECEIVED,&#13;&#10;        ReturnStatus.COMPLETED&#13;&#10;    );&#13;&#10;&#13;&#10;    for (ReturnCreateRequest.Item itemReq : req.getItems()) {&#13;&#10;      Product product = productRepo.findById(itemReq.getProductId())&#13;&#10;          .orElseThrow(() -&gt; new RuntimeException(&quot;제품 정보를 찾을 수 없습니다.&quot;));&#13;&#10;&#13;&#10;      // 반품 가능 수량 제한&#13;&#10;      int orderedQty = orderedQtyMap.getOrDefault(product.getProductId(), 0);&#13;&#10;      int already = returnItemRepo.sumReturnedQtyForOrderAndProduct(&#13;&#10;          orders, product.getProductId(), statuses&#13;&#10;      );&#13;&#10;      int left = orderedQty - already;&#13;&#10;      if (itemReq.getQuantity() &gt; left) {&#13;&#10;        throw new RuntimeException(&#13;&#10;            String.format(&quot;반품 가능 수량을 초과했습니다. (주문수량=%d개, 누적반품=%d개)&quot;, orderedQty, already)&#13;&#10;        );&#13;&#10;      }&#13;&#10;&#13;&#10;      int quantity = itemReq.getQuantity();&#13;&#10;      int unitPrice = itemReq.getUnitPrice();&#13;&#10;      int subtotalPrice = Math.multiplyExact(quantity, unitPrice);&#13;&#10;&#13;&#10;      ReturnItem returnItem = ReturnItem.builder()&#13;&#10;          .returns(returns)&#13;&#10;          .product(product)&#13;&#10;          .quantity(quantity)&#13;&#10;          .unitPrice(unitPrice)&#13;&#10;          .subtotalPrice(subtotalPrice)&#13;&#10;          .build();&#13;&#10;      returnItems.add(returnItem);&#13;&#10;    }&#13;&#10;    returnItemRepo.saveAll(returnItems);&#13;&#10;&#13;&#10;    return new ReturnCreateResponse(returns.getReturnId());&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * 본사에서 반품 요청 목록을 조회합니다. 기간이나 상태를 지정하지 않으면 모든 반품 요청을 조회합니다.&#13;&#10;   */&#13;&#10;  @Transactional(readOnly = true)&#13;&#10;  public Page&lt;ReturnListResponse&gt; getReturns(&#13;&#10;      ReturnStatus status, Region region, LocalDateTime start, LocalDateTime end,&#13;&#10;      int page, int size&#13;&#10;  ) {&#13;&#10;    Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).descending());&#13;&#10;    String summary = &quot;반품요청&quot;;&#13;&#10;    return returnRepo.findByStatusAndRegionAndCreatedAtBetween(&#13;&#10;            status, region, start, end, pageable)&#13;&#10;        .map(returns -&gt; ReturnListResponse.builder()&#13;&#10;            .returnId(returns.getReturnId())&#13;&#10;            .pharmacyId(returns.getPharmacy().getPharmacyId())&#13;&#10;            .pharmacyName(returns.getPharmacy().getPharmacyName())&#13;&#10;            .status(returns.getStatus())&#13;&#10;            .summary(summary)&#13;&#10;            .reason(returns.getReason())&#13;&#10;            .totalPrice(returns.getTotalPrice())&#13;&#10;            .createdAt(returns.getCreatedAt())&#13;&#10;            .build());&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * 가맹점에서 반품 요청 목록을 조회합니다. 상태를 지정하지 않으면 해당 가맹점의 모든 반품 요청을 조회합니다.&#13;&#10;   */&#13;&#10;  @Transactional(readOnly = true)&#13;&#10;  public Page&lt;ReturnListResponse&gt; getReturnsByPharmacy(&#13;&#10;      Long pharmacyId, ReturnStatus status, int page, int size&#13;&#10;  ) {&#13;&#10;    Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).descending());&#13;&#10;    String summary = &quot;반품요청&quot;;&#13;&#10;    return returnRepo.findByPharmacy_PharmacyIdAndStatus(pharmacyId, status, pageable)&#13;&#10;        .map(returns -&gt; ReturnListResponse.builder()&#13;&#10;            .returnId(returns.getReturnId())&#13;&#10;            .pharmacyId(returns.getPharmacy().getPharmacyId())&#13;&#10;            .pharmacyName(returns.getPharmacy().getPharmacyName())&#13;&#10;            .status(returns.getStatus())&#13;&#10;            .summary(summary)&#13;&#10;            .reason(returns.getReason())&#13;&#10;            .totalPrice(returns.getTotalPrice())&#13;&#10;            .createdAt(returns.getCreatedAt())&#13;&#10;            .build());&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * 반품 요청 상세를 조회합니다.&#13;&#10;   */&#13;&#10;  @Transactional(readOnly = true)&#13;&#10;  public ReturnDetailResponse getReturnById(Long returnId) {&#13;&#10;    Returns returns = returnRepo.findById(returnId)&#13;&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;반품 요청 정보를 찾을 수 없습니다.&quot;));&#13;&#10;&#13;&#10;    List&lt;ReturnItem&gt; items = returnItemRepo.findByReturns(returns);&#13;&#10;    List&lt;ReturnDetailResponse.Item&gt; itemsList = items.stream()&#13;&#10;        .map(item -&gt; ReturnDetailResponse.Item.builder()&#13;&#10;            .productId(item.getProduct().getProductId())&#13;&#10;            .productName(item.getProduct().getProductName())&#13;&#10;            .mainCategory(item.getProduct().getMainCategory())&#13;&#10;            .subCategory(item.getProduct().getSubCategory())&#13;&#10;            .manufacturer(item.getProduct().getManufacturer())&#13;&#10;            .productImgUrl(item.getProduct().getProductImgUrl())&#13;&#10;            .quantity(item.getQuantity())&#13;&#10;            .unitPrice(item.getUnitPrice())&#13;&#10;            .subtotalPrice(item.getSubtotalPrice())&#13;&#10;            .build()&#13;&#10;        ).toList();&#13;&#10;&#13;&#10;    return ReturnDetailResponse.builder()&#13;&#10;        .returnId(returns.getReturnId())&#13;&#10;        .pharmacyId(returns.getPharmacy().getPharmacyId())&#13;&#10;        .pharmacyName(returns.getPharmacy().getPharmacyName())&#13;&#10;        .status(returns.getStatus())&#13;&#10;        .summary(&quot;반품요청&quot;)&#13;&#10;        .reason(returns.getReason())&#13;&#10;        .totalPrice(returns.getTotalPrice())&#13;&#10;        .createdAt(returns.getCreatedAt())&#13;&#10;        .updatedAt(returns.getUpdatedAt())&#13;&#10;        .items(itemsList)&#13;&#10;        .build();&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * 반품 요청의 상태를 업데이트합니다. 업데이트 상태가 COMPLETED인 경우, 유저의 미정산 잔액을 감소시키고 제품의 재고를 복구합니다.&#13;&#10;   */&#13;&#10;  @Transactional&#13;&#10;  public void updateReturnStatus(Long returnId, ReturnStatus status) {&#13;&#10;    Returns returns = returnRepo.findById(returnId)&#13;&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;반품 요청 정보를 찾을 수 없습니다.&quot;));&#13;&#10;&#13;&#10;    if (returns.getStatus() == ReturnStatus.CANCELED) {&#13;&#10;      throw new RuntimeException(&quot;이미 취소된 반품 요청입니다.&quot;);&#13;&#10;    } else if (returns.getStatus() == ReturnStatus.COMPLETED) {&#13;&#10;      throw new RuntimeException(&quot;이미 완료된 반품 요청입니다.&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    if (status == ReturnStatus.COMPLETED) {&#13;&#10;      balanceTxService.createBalanceTx(&#13;&#10;          returns.getPharmacy().getPharmacyId(), BalanceTxType.RETURN, returns.getTotalPrice()&#13;&#10;      );&#13;&#10;&#13;&#10;      List&lt;ReturnItem&gt; items = returnItemRepo.findByReturns(returns);&#13;&#10;      for (ReturnItem ri : items) {&#13;&#10;        stockTxService.createStockTx(&#13;&#10;            ri.getProduct().getProductId(), StockTxType.RETURN_IN, ri.getQuantity()&#13;&#10;        );&#13;&#10;      }&#13;&#10;    }&#13;&#10;&#13;&#10;    returns.setStatus(status);&#13;&#10;    returnRepo.save(returns);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * 반품 요청을 삭제합니다.&#13;&#10;   */&#13;&#10;  @Transactional&#13;&#10;  public void deleteReturn(Long returnId) {&#13;&#10;    Returns returns = returnRepo.findById(returnId)&#13;&#10;        .orElseThrow(() -&gt; new RuntimeException(&quot;반품 요청 정보를 찾을 수 없습니다.&quot;));&#13;&#10;&#13;&#10;    returnItemRepo.deleteAllByReturns(returns);&#13;&#10;    returnRepo.delete(returns);&#13;&#10;  }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>